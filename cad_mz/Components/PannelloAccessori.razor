@using System.Text
@using cad_mz.Logic
@using static cad_mz.Logic.Entities.Accessorio

<MudPaper Style="padding: 4px">
    <MudGrid Spacing="2">
        <MudItem xs="12">
            <MudText>Accessori</MudText>
        </MudItem>
        <MudItem xs="12">
            <MudStack Row Style="flex-wrap: wrap;">
                 @foreach (var acc in values.UserData.Accessori.Where(x => x.TypeOfOptional.Equals(TipoAccessorio.Chiocciola)))
                {
                    <SelettoreAccessorio Acc="acc" Ts="SelettoreAccessorio.TipoSelettore.Check" reload="@((args)=>ControllaEsclusioni(acc, args.Item1, args.Item2))" />
                }
            </MudStack>
        </MudItem>
    </MudGrid>
</MudPaper>   
@code {
    [CascadingParameter] MyCascadingValues values { get; set; } = new()!;
    private static readonly NLog.Logger Logger = NLog.LogManager.GetCurrentClassLogger();
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (values.UserSelection.SelectedFan.DatiChiocciola.Support_Mandatory)
        {
            values.UserData.Accessori.Find(x => x.Code.Equals("SA")).Selected = true;
            values.UserData.Accessori.Find(x => x.Code.Equals("SA")).Disabled = true;
        }
        if ((values.UserSelection.Esecuzione.Key != null) && (values.UserSelection.Esecuzione.Key.Equals("E01")))
        {
            values.UserData.Accessori.Find(x => x.Code.Equals("SA")).Disabled = true;
        }
        StateHasChanged();
    }
    protected void ControllaEsclusioni(Accessorio acc, bool info, int qty)
    {
        switch (acc.Code)
        {
            case "AV":
                values.UserData.Accessori.Find(x => x.Code.Equals("SA")).Disabled = info;
                values.UserData.Accessori.Find(x => x.Code.Equals("SA")).Selected = info;
                break;
            case "PAV":
                values.UserData.Accessori.Find(x => x.Code.Equals("SA")).Disabled = info;
                values.UserData.Accessori.Find(x => x.Code.Equals("SA")).Selected = info;
                values.UserData.Accessori.Find(x => x.Code.Equals("AV")).Disabled = info;
                values.UserData.Accessori.Find(x => x.Code.Equals("AV")).Selected = info;
                break;
            case "TN":
                if (values.UserSelection.SelectedFan.MotorSize.Contains("71"))
                {
                    values.UserData.Accessori.Find(x => x.Code.Equals("GC")).Selected = !info;
                }
                break;
            case "GC":
                if (values.UserSelection.SelectedFan.MotorSize.Contains("71"))
                {
                    values.UserData.Accessori.Find(x => x.Code.Equals("TN")).Selected = !info;
                }
                break;
            default:
                break;
        }
    }
    public void ConfermaAccessori()
    {
        values.UserSelection.AccessoriChiocciola = values.UserData.Accessori.Where(x => x.Selected && x.TypeOfOptional == TipoAccessorio.Chiocciola).ToList();
    }
}


